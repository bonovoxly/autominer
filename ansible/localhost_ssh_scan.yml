# localhost_ssh_config.yml
#
# This playbook configures the localhost SSH config and adds host entries for
# all AWS names.  It replaces spaces with '_'.
#
# To run:
#   ansible-playbook localhost_ssh_config.yml -e region=us-east-1
#
# To clean out all trace per region:
#   ansible-playbook localhost_ssh_config.yml -e region=us-east-1 and -e clean=yes
#
# There is also a custom marker variable - `mark`.  One example use is if you have regions with similar hostnames.
#
# adding a 'custoname' variable.
---
- hosts: localhost
  connection: local
  gather_facts: yes
  tasks:
    - name: Get ec2 facts.
      ec2_remote_facts:
        region: "{{ region }}"
        filters:
          instance-state-name: running
      register: ec2_facts

    - name: Ensure ~/.ssh directory exists.
      file:
        path: "{{ ansible_env.HOME }}/.ssh"
        state: directory

    - name: Touch ~/.ssh/config and ~/.ssh/known_hosts (creates them if they don't exist).
      file:
        path: "{{ item }}"
        state: touch
      with_items: 
        - "{{ ansible_env.HOME }}/.ssh/config"
        - "{{ ansible_env.HOME }}/.ssh/known_hosts"

    - name: Remove previous SSH config settings.
      blockinfile:
        dest: "{{ ansible_env.HOME }}/.ssh/config"
        marker: "# {mark} {% if customname is defined %}{{ customname }}-{% endif %}{{ region }} - {{ item.tags.Name.replace(' ','_') }} - ansible generated {% if mark is defined %}{{ mark }}{% endif %}"
        state: absent
      with_items: "{{ ec2_facts.instances }}"
      when: item.tags.Name is defined and clean is not defined

    - name: Configure SSH proxy host.
      blockinfile:
        dest: "{{ ansible_env.HOME }}/.ssh/config"
        marker: "# {mark} {% if customname is defined %}{{ customname }}-{% endif %}{{ region }} - {{ item.tags.Name.replace(' ','_') }} - ansible generated {% if mark is defined %}{{ mark }}{% endif %}"
        block: |
          Host {% if customname is defined %}{{ customname }}-{% endif %}{{ item.tags.Name.replace(' ','_') }}
            HostName {{ item.private_ip_address }}
            ServerAliveInterval 30
      with_items: "{{ ec2_facts.instances }}"
      when: item.tags.Name is defined and item.private_ip_address and clean is not defined

    - name: Clean SSH config.
      command: sed -ie '/# BEGIN {% if customname is defined %}{{ customname }}-{% endif %}{{ region }}.* ansible generated/,+4d' {{ ansible_env.HOME }}/.ssh/config
      when: clean is defined and region is defined

    - name: Clean all environment created SSH fingerprints.
      lineinfile:
        dest: "{{ ansible_env.HOME }}/.ssh/known_hosts"
        regexp: "^.*#\\s{% if customname is defined %}{{ customname }}-{% endif %}{{ region }} - {{ item.tags.Name.replace(' ','_') }} - ansible generated {% if mark is defined %}{{ mark }}{% endif %}$"
        state: absent
      with_items: "{{ ec2_facts.instances }}"
      when: item.tags.Name is defined and clean is not defined

    # This is using env variables.
    - name: Get SSH key from system log.
      shell: aws ec2 get-console-output \
               --region {{ region }} \
               --instance-id {{ item.id }} \
               --output text \
               | grep -v Compatibility \
               | sed -n 's/^.*\(ecdsa-sha2-nistp256 \)\(.*\)/\2/p' \
               | awk '{print $1}' \
               | sed 's/^M//' \
               | tail -n 1
      register: host_key_info
      with_items: "{{ ec2_facts.instances }}"
      when: item.tags.Name is defined and clean is not defined

    - name: Import SSH fingerpints - private IP addresses for items found in the AWS system console.
      lineinfile:
        dest: "{{ ansible_env.HOME }}/.ssh/known_hosts"
        line: "{% if customname is defined %}{{ customname }}-{% endif %}{{ item.0.tags.Name}},{{ item.0.private_dns_name }},{{ item.0.private_ip_address }}{% if item.0.public_ip_address is defined %},{{ item.0.public_ip_address }}{% endif %} ecdsa-sha2-nistp256 {{ item.1.stdout }} # {% if customname is defined %}{{ customname }}-{% endif %}{{ region }} - {{ item.0.tags.Name.replace(' ','_') }} - ansible generated {% if mark is defined %}{{ mark }}{% endif %}"
      with_together:
        - "{{ ec2_facts.instances }}"
        - "{{ host_key_info.results }}"
      when: clean is not defined and item.1.stdout is defined and item.1.stdout != ''

    - name: Clean SSH known_hosts.
      command: sed -ie '/^.*# {% if customname is defined %}{{ customname }}-{% endif %}{{ region }} - {{ item.0.tags.Name.replace(' ','_') }} - ansible generated {% if mark is defined %}{{ mark }}{% endif %}/d' {{ ansible_env.HOME }}/.ssh/known_hosts
      with_items: "{{ ec2_facts.instances }}"
      when: clean is defined and region is defined
